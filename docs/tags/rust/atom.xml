<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>A blog about Rust, Compression, and other things. - rust</title>
    <subtitle>A blog about Rust, Compression, WebAssembly, and other things.</subtitle>
    <link rel="self" type="application/atom+xml" href="http://flexineering.com/tags/rust/atom.xml"/>
    <link rel="alternate" type="text/html" href="http://flexineering.com/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-07-17T00:00:00+00:00</updated>
    <id>http://flexineering.com/tags/rust/atom.xml</id>
    <entry xml:lang="en">
        <title>Visualizing Internal Crates Dependencies with dep_graph_rs!</title>
        <published>2025-07-17T00:00:00+00:00</published>
        <updated>2025-07-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="http://flexineering.com/posts/dep-graph-rs/"/>
        <id>http://flexineering.com/posts/dep-graph-rs/</id>
        
        <content type="html" xml:base="http://flexineering.com/posts/dep-graph-rs/">&lt;p&gt;Ever found yourself wondering which modules in a gigantonormus rust crate talk to each other?
Wouldn’t be a graph be awesome for that.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PSeitz&#x2F;dep_graph_rs&quot;&gt;&lt;code&gt;dep_graph_rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; comes to the rescue!
It’s a command-line tool that generates a dependency graph for the internal dependencies of your Rust crate.
Vivid dependency graphs at your fingertips!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;&#x2F;h2&gt;
&lt;p&gt;It parses your source code using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;syn&quot;&gt;&lt;code&gt;syn&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate,
analyzes all the &lt;code&gt;use crate&lt;&#x2F;code&gt; statements, tries to find the files they belong to, and builds a directed graph of
how everything is connected.&lt;&#x2F;p&gt;
&lt;p&gt;The output is in a &lt;a href=&quot;https:&#x2F;&#x2F;graphviz.org&#x2F;doc&#x2F;info&#x2F;lang.html&quot;&gt;DOT&lt;&#x2F;a&gt; graph, ready for visualization.
For now at least, maybe later some more CLI friendly output?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-real-world-example&quot;&gt;A Real-World Example&lt;&#x2F;h2&gt;
&lt;p&gt;I was looking at the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;quickwit-oss&#x2F;tantivy&quot;&gt;&lt;code&gt;tantivy&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate and thinking about extracting the &lt;code&gt;directory&lt;&#x2F;code&gt;
module into its own, separate crate. Before doing that, I wanted a map of its dependencies.
Like a treasure map, but for code!&lt;&#x2F;p&gt;
&lt;p&gt;We can generate a graph of just the dependencies going outwards from the &lt;code&gt;directory&lt;&#x2F;code&gt; module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;dep_graph_rs&lt;&#x2F;span&gt;&lt;span&gt; path&#x2F;to&#x2F;tantivy&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; --source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;directory.*&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tantivy_directory_deps.dot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And voilà! This command produces a &lt;code&gt;.dot&lt;&#x2F;code&gt; file that can be rendered into this fantastically beautiful graph:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;example_dep_graph.png&quot; alt=&quot;Fantastically beautiful graph for the tantivy ‘directory’ module&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;tip&quot;&gt;
&lt;div class=&quot;tipheader&quot;&gt;
&lt;style&gt;
    [data-mode=&quot;light&quot;]{
      --gradient: url(#lightGradient);
    }

    [data-mode=&quot;dark&quot;]{
      --gradient: url(#darkGradient);
    }
    
    #darkGradient {
       --color-background:#4e3030;
    }

    .myCircle {
      fill: var(--gradient);
    }
&lt;&#x2F;style&gt;
&lt;svg version=&quot;1.0&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;
 width=&quot;45pt&quot; height=&quot;45pt&quot; viewBox=&quot;0 0 275 275&quot;
 preserveAspectRatio=&quot;xMidYMid meet&quot;&gt;
 &lt;defs&gt;
    &lt;radialGradient id=&quot;darkGradient&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot; fx=&quot;50%&quot; fy=&quot;40%&quot;&gt;
      &lt;stop offset=&quot;0%&quot; stop-color=&quot;var(--color-background)&quot; &#x2F;&gt;
      &lt;stop offset=&quot;50%&quot; stop-color=&quot;#1d1f21&quot; &#x2F;&gt;
    &lt;&#x2F;radialGradient&gt;
    &lt;radialGradient id=&quot;lightGradient&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot; fx=&quot;50%&quot; fy=&quot;40%&quot;&gt;
      &lt;stop offset=&quot;0%&quot; stop-color=&quot;#f6e2f5&quot; &#x2F;&gt;
      &lt;stop offset=&quot;50%&quot; stop-color=&quot;#d6e2f5&quot; &#x2F;&gt;
    &lt;&#x2F;radialGradient&gt;
&lt;&#x2F;defs&gt;
&lt;circle class=&quot;myCircle&quot; cx=&quot;140&quot; cy=&quot;140&quot; r=&quot;128&quot; &#x2F;&gt;
&lt;g transform=&quot;translate(0.000000,275.000000) scale(0.100000,-0.100000)&quot;
fill=&quot;#FFFFFF&quot; stroke=&quot;#FFFFFF&quot;&gt;
&lt;path d=&quot;M1355 2277 c-3 -7 -5 -49 -3 -93 3 -71 5 -79 23 -79 19 0 20 7 20 90
0 78 -2 90 -18 93 -9 2 -19 -3 -22 -11z m35 -83 c0 -64 -3 -85 -12 -82 -14 5
-24 105 -14 144 13 52 26 21 26 -62z&quot;&#x2F;&gt;
&lt;path d=&quot;M1107 2226 c-3 -8 11 -48 30 -90 26 -54 42 -76 55 -76 26 0 23 17
-17 104 -34 72 -56 93 -68 62z m66 -82 c29 -55 34 -78 16 -72 -6 2 -10 7 -9
12 1 5 -3 12 -8 15 -10 7 -52 98 -52 113 0 16 24 -15 53 -68z&quot;&#x2F;&gt;
&lt;path d=&quot;M1644 2183 c-10 -16 -27 -44 -40 -64 -31 -50 -34 -74 -9 -74 13 0 32
22 62 73 24 40 41 78 38 83 -11 17 -35 9 -51 -18z m36 6 c0 -18 -43 -89 -50
-84 -4 3 -7 -3 -6 -12 0 -10 -7 -19 -16 -21 -16 -3 -16 1 4 37 12 22 25 38 30
35 5 -3 8 0 7 7 -3 19 11 49 22 49 5 0 9 -5 9 -11z&quot;&#x2F;&gt;
&lt;path d=&quot;M901 2063 c0 -24 125 -127 144 -119 27 10 15 30 -49 84 -65 54 -96
65 -95 35z m87 -44 c34 -27 60 -55 56 -60 -8 -13 -50 15 -46 31 1 6 -1 9 -6 6
-10 -6 -82 51 -82 65 0 17 15 9 78 -42z&quot;&#x2F;&gt;
&lt;path d=&quot;M1788 1993 c-65 -45 -89 -83 -53 -83 22 0 157 100 152 114 -8 23 -34
15 -99 -31z m82 25 c-1 -12 -118 -98 -133 -98 -20 0 0 23 56 64 66 48 77 53
77 34z&quot;&#x2F;&gt;
&lt;path d=&quot;M1300 1927 c-73 -46 -170 -175 -170 -225 0 -10 15 -40 32 -68 28 -42
33 -58 32 -109 -1 -134 -58 -267 -158 -372 -33 -36 -65 -71 -69 -79 -9 -15
-37 -19 -37 -5 0 11 -63 49 -95 57 -14 3 -25 10 -25 14 0 5 -12 23 -27 41 -17
20 -28 46 -30 70 -4 59 -46 141 -92 181 -54 46 -115 63 -222 62 -181 -1 -273
-90 -270 -260 0 -36 3 -77 7 -92 19 -92 113 -305 162 -370 65 -86 262 -187
462 -237 36 -9 109 -32 164 -51 54 -19 110 -34 125 -34 43 0 70 27 110 109 20
42 59 105 85 140 26 36 52 84 59 108 8 30 16 43 29 43 14 0 18 -8 18 -32 0
-44 29 -156 50 -193 10 -17 21 -55 25 -83 9 -64 22 -79 81 -88 84 -12 371 58
489 119 50 27 225 164 225 177 0 6 7 10 15 10 8 0 24 9 35 20 11 11 24 20 30
20 6 0 10 6 10 14 0 8 7 16 15 20 8 3 15 13 15 21 0 9 5 13 10 10 6 -3 10 0
10 8 0 8 11 25 25 38 13 13 25 30 25 37 0 6 4 12 9 12 5 0 13 12 19 28 5 15
19 38 31 51 11 13 18 28 15 32 -3 5 -1 9 5 9 6 0 22 38 36 84 28 92 25 148
-11 187 -9 10 -13 19 -8 19 4 0 -11 18 -34 39 -38 36 -146 98 -155 89 -2 -1
-10 2 -18 8 -41 33 -239 61 -239 35 0 -6 -9 -11 -19 -11 -11 0 -33 -12 -50
-26 -36 -30 -85 -109 -77 -123 3 -5 2 -11 -4 -13 -6 -2 -13 -28 -17 -58 -3
-30 -12 -58 -19 -63 -7 -4 -15 -21 -19 -37 -5 -22 -16 -34 -39 -44 -18 -7 -52
-32 -76 -55 -41 -39 -70 -52 -70 -31 0 5 -13 25 -30 43 -55 63 -130 250 -130
325 0 13 14 45 31 70 l31 47 -11 82 c-8 55 -8 89 -2 101 7 14 5 26 -10 48 -10
16 -19 37 -19 47 0 11 -13 24 -32 32 -18 7 -39 23 -46 35 -12 20 -14 20 -42 3
-29 -17 -30 -16 -54 10 -30 33 -50 34 -96 4z m88 -25 c15 -22 14 -23 -11 -17
-19 5 -28 2 -36 -13 -17 -32 -13 -50 19 -84 42 -43 37 -98 -9 -98 -11 0 -11 4
4 20 21 23 13 54 -12 46 -15 -4 -21 5 -36 50 -15 49 -16 58 -2 83 24 47 57 52
83 13z m92 -16 c0 -14 -29 -31 -38 -21 -6 6 18 35 29 35 5 0 9 -6 9 -14z
m-203 -20 c-8 -19 41 -164 65 -195 24 -31 23 -68 -1 -81 -23 -12 -42 7 -21 20
20 12 7 45 -18 43 -23 -3 -24 0 -52 125 -10 45 -10 56 4 77 18 27 31 34 23 11z
m99 -11 c-6 -17 21 -48 35 -40 5 4 9 13 9 21 0 10 8 14 23 12 16 -2 21 -9 19
-23 -9 -48 -43 -58 -86 -24 -25 19 -34 48 -19 62 12 13 25 7 19 -8z m159 -8
c20 -15 16 -54 -8 -79 -7 -7 -19 -27 -26 -45 -7 -18 -21 -35 -31 -38 -18 -6
-55 -53 -47 -61 7 -7 97 83 97 98 1 22 40 62 50 52 11 -11 -17 -94 -30 -94 -4
0 -10 -13 -13 -29 -4 -17 -14 -32 -26 -36 -29 -9 -71 -45 -71 -61 0 -10 6 -8
20 6 12 12 32 25 46 30 16 6 32 25 42 50 9 22 20 40 25 40 14 0 7 -48 -11 -71
-11 -13 -22 -37 -26 -52 -3 -15 -18 -37 -31 -49 -14 -12 -25 -25 -25 -30 0
-19 64 51 84 92 20 43 21 43 24 18 4 -33 -37 -96 -101 -155 -42 -39 -58 -47
-111 -55 -14 -2 -24 -22 -41 -89 -26 -100 -41 -214 -27 -205 5 3 12 28 15 56
7 61 55 217 69 226 18 11 19 -4 3 -72 -9 -38 -25 -145 -35 -239 -22 -205 -38
-265 -94 -347 -24 -35 -55 -86 -69 -114 -57 -112 -92 -132 -165 -95 -20 10
-77 33 -127 51 -81 30 -131 54 -145 70 -16 19 -79 60 -91 60 -9 0 -7 -5 6 -12
11 -6 29 -20 40 -31 11 -10 36 -27 55 -37 79 -43 -57 -9 -185 45 -40 17 -95
61 -95 77 0 11 71 112 82 116 4 2 8 10 8 17 0 8 6 18 13 22 8 4 22 22 32 40
10 18 22 30 27 27 4 -3 8 1 8 8 0 16 57 68 65 60 3 -3 5 0 5 6 0 19 42 62 53
55 6 -3 7 -1 3 5 -21 35 103 -9 139 -48 16 -18 16 -22 -14 -81 -17 -34 -31
-77 -31 -95 0 -18 -4 -36 -10 -39 -16 -10 -12 -88 6 -113 8 -12 22 -22 30 -22
10 0 9 5 -6 20 -20 20 -25 45 -14 74 5 13 9 14 20 5 9 -8 14 -8 14 -1 0 6 -5
14 -10 17 -20 13 -10 86 21 148 33 65 63 105 149 197 76 82 113 169 155 364 6
26 9 28 42 23 49 -8 113 39 113 84 0 16 7 46 15 66 8 19 15 44 15 54 0 10 12
24 26 31 25 12 46 42 58 81 6 21 16 21 41 4z m-282 -149 c41 -124 42 -128 27
-128 -5 0 -10 5 -10 11 0 6 -18 41 -40 79 -45 78 -55 150 -20 150 4 0 23 -51
43 -112z m3 -145 c-9 -10 -32 14 -71 78 -28 46 -35 66 -30 87 6 24 11 18 57
-66 27 -51 48 -96 44 -99z m1012 -43 c2 -6 8 -8 12 -5 5 3 17 2 27 -3 10 -5
47 -23 83 -39 36 -17 80 -43 97 -57 41 -34 73 -102 73 -153 0 -45 -33 -148
-55 -173 -8 -9 -13 -19 -10 -22 3 -3 -4 -13 -15 -23 -11 -10 -20 -26 -20 -35
0 -20 -24 -43 -33 -33 -4 3 -7 -3 -7 -15 0 -12 -8 -30 -18 -40 -9 -9 -28 -32
-41 -50 l-23 -33 -46 81 c-60 103 -145 202 -254 297 -92 79 -100 95 -73 143 8
14 14 35 15 47 0 11 13 32 29 46 17 14 28 27 25 29 -2 3 2 11 11 18 8 7 15 10
15 6 0 -3 15 4 33 15 27 17 42 19 102 14 39 -3 72 -10 73 -15z m-1714 -44
c103 -31 164 -103 181 -211 l6 -41 -140 -153 c-77 -84 -162 -181 -188 -216
-26 -35 -52 -63 -58 -61 -13 4 -111 200 -134 271 -55 165 -49 275 18 347 64
70 203 98 315 64z m994 -124 c15 -75 67 -180 130 -266 58 -79 71 -129 53 -202
-15 -59 -7 -68 14 -18 10 24 15 61 14 94 -4 66 5 84 72 144 62 56 92 66 121
40 25 -23 135 -163 174 -223 l28 -44 -37 -32 c-20 -17 -56 -38 -79 -45 -35
-11 -39 -15 -20 -18 26 -4 104 39 126 69 14 21 15 20 41 -21 14 -23 28 -47 31
-54 6 -14 -58 -76 -128 -124 -53 -37 -62 -27 -21 26 14 19 20 33 12 30 -8 -2
-26 -26 -41 -53 -24 -44 -34 -52 -95 -76 -192 -77 -369 -106 -399 -65 -8 11
-14 28 -14 39 0 10 -11 32 -24 48 -45 53 -112 273 -123 405 -6 79 10 240 33
321 13 47 18 53 57 66 23 9 47 16 52 16 6 1 16 -25 23 -57z m483 -159 c44 -36
79 -69 79 -72 0 -3 17 -24 38 -46 74 -77 152 -209 152 -256 0 -17 -40 -49 -40
-32 0 4 -4 2 -9 -5 -6 -10 -16 0 -36 35 -76 130 -184 273 -263 348 -41 39 -43
43 -31 68 7 15 16 27 22 27 5 0 45 -30 88 -67z m-1231 -53 c0 -3 -13 -13 -29
-23 -57 -34 -279 -298 -314 -374 -13 -29 -25 -28 -60 1 l-28 23 45 59 c59 78
137 167 249 282 l92 94 22 -29 c13 -15 23 -30 23 -33z&quot;&#x2F;&gt;
&lt;path d=&quot;M1150 954 c0 -26 -52 -128 -78 -152 -29 -28 -21 -43 9 -16 20 18 89
151 89 173 0 6 -4 11 -10 11 -5 0 -10 -7 -10 -16z&quot;&#x2F;&gt;
&lt;path d=&quot;M680 810 c45 -9 157 -13 149 -6 -2 2 -47 6 -99 9 -67 4 -82 3 -50 -3z&quot;&#x2F;&gt;
&lt;path d=&quot;M1210 740 c-12 -25 -26 -47 -29 -50 -4 -3 -15 -18 -25 -35 -42 -69
-62 -82 -116 -77 -57 4 -66 -9 -20 -33 54 -28 100 -10 126 48 10 23 25 48 32
56 21 21 64 111 59 124 -2 7 -14 -8 -27 -33z&quot;&#x2F;&gt;
&lt;path d=&quot;M1521 1338 c0 -7 9 -31 20 -53 15 -30 18 -34 14 -13 -10 54 -37 104
-34 66z&quot;&#x2F;&gt;
&lt;path d=&quot;M1560 961 c0 -6 4 -11 9 -11 5 0 23 -21 39 -47 35 -56 72 -97 80 -89
3 4 -5 17 -17 30 -13 14 -37 46 -55 72 -30 46 -56 67 -56 45z&quot;&#x2F;&gt;
&lt;path d=&quot;M785 1840 c-11 -18 6 -29 84 -51 75 -21 101 -20 101 5 0 25 -171 68
-185 46z m80 -11 c25 -6 42 -15 39 -20 -3 -5 2 -6 10 -3 22 8 52 -4 40 -16
-11 -11 -94 8 -94 21 0 5 -7 6 -15 3 -8 -4 -21 -1 -29 5 -7 6 -16 8 -19 4 -4
-3 -7 -1 -7 5 0 15 19 15 75 1z&quot;&#x2F;&gt;
&lt;path d=&quot;M1850 1786 c-37 -8 -56 -17 -58 -28 -2 -9 1 -19 6 -22 14 -9 176 24
184 37 18 29 -32 34 -132 13z m120 -5 c0 -9 -70 -26 -130 -33 -46 -5 -31 17
16 24 25 4 49 9 52 12 9 10 62 7 62 -3z&quot;&#x2F;&gt;
&lt;path d=&quot;M835 1606 c-42 -8 -61 -16 -63 -28 -5 -27 11 -29 102 -12 72 14 86
19 86 35 0 22 -30 24 -125 5z m115 -5 c0 -9 -12 -13 -100 -28 -59 -10 -60 -10
-60 2 -1 5 23 15 52 21 69 15 108 16 108 5z&quot;&#x2F;&gt;
&lt;path d=&quot;M1791 1581 c-28 -18 -1 -38 79 -59 84 -23 103 -22 98 5 -2 10 -33 24
-83 39 -44 13 -80 23 -80 23 0 1 -6 -3 -14 -8z m138 -40 c14 -4 27 -13 29 -21
3 -8 -1 -11 -9 -8 -8 3 -45 13 -84 23 -80 21 -79 20 -71 34 4 6 25 4 59 -6 28
-9 63 -19 76 -22z&quot;&#x2F;&gt;
&lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;span class=&quot;flex-info&quot;&gt;Flex Info&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
	&lt;div&gt; &lt;p&gt;Yes, this graph indeed has &lt;span class=&quot;rainbow&quot;&gt;colors&lt;&#x2F;span&gt;! We really live in the future.&lt;&#x2F;p&gt;
 &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now there are two constants, &lt;code&gt;META_FILEPATH&lt;&#x2F;code&gt; and &lt;code&gt;MANAGED_FILEPATH&lt;&#x2F;code&gt; in &lt;code&gt;core&lt;&#x2F;code&gt;, that maybe could be moved into the &lt;code&gt;directory&lt;&#x2F;code&gt; module?
To find out, we can create a new graph that only shows these two items:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;dep_graph_rs&lt;&#x2F;span&gt;&lt;span&gt; path&#x2F;to&#x2F;tantivy&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; --item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;META_FILEPATH|MANAGED_FILEPATH&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;xclip&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -selection&lt;&#x2F;span&gt;&lt;span&gt; clipboard
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;example_dep_graph2.png&quot; alt=&quot;META_FILEPATH and MANAGED_FILEPATH  dependency graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now we can see that these two constants have some unexpected dependencies,
which might complicate the extraction of the &lt;code&gt;directory&lt;&#x2F;code&gt; module into its own crate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Generates dependency graphs&lt;&#x2F;strong&gt; from your Rust source code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Outputs in DOT format&lt;&#x2F;strong&gt;, so you can use it with awesome tools like Graphviz.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Group dependencies&lt;&#x2F;strong&gt; by file or by module.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Filter the graph&lt;&#x2F;strong&gt; by source, destination, or even the specific item being imported (like a function or struct).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Clusters nodes&lt;&#x2F;strong&gt; by their root module for a cleaner, more readable graph.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to Use It&lt;&#x2F;h2&gt;
&lt;p&gt;First, install it with &lt;code&gt;cargo&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; install dep_graph_rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, just run it from your crate’s root directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;dep_graph_rs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; graph.dot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will spit out the dependency graph in DOT format into a file named &lt;code&gt;graph.dot&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To render the graph, you have a couple of options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Online:&lt;&#x2F;strong&gt; The quickest way is to copy the contents of &lt;code&gt;graph.dot&lt;&#x2F;code&gt; and paste them into an online viewer like &lt;a href=&quot;https:&#x2F;&#x2F;dreampuf.github.io&#x2F;GraphvizOnline&#x2F;&quot;&gt;GraphvizOnline&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Local:&lt;&#x2F;strong&gt; If you have &lt;a href=&quot;https:&#x2F;&#x2F;graphviz.org&#x2F;&quot;&gt;Graphviz&lt;&#x2F;a&gt; installed, you can render it to an image yourself: &lt;code&gt;dot -Tpng graph.dot -o graph.png&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;powerful-filtering&quot;&gt;Powerful Filtering&lt;&#x2F;h3&gt;
&lt;p&gt;You can slice and dice the graph to only show what you care about.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--mode &amp;lt;MODE&amp;gt;&lt;&#x2F;code&gt;: Group by &lt;code&gt;file&lt;&#x2F;code&gt; or &lt;code&gt;module&lt;&#x2F;code&gt; (the default).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--source &amp;lt;SOURCE&amp;gt;&lt;&#x2F;code&gt;: Only show dependencies from a specific module.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--destination &amp;lt;DESTINATION&amp;gt;&lt;&#x2F;code&gt;: Only show dependencies pointing to a specific module.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--item &amp;lt;ITEM&amp;gt;&lt;&#x2F;code&gt;: Filter by the name of the imported item (e.g., a function or struct).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;tip&quot;&gt;
&lt;div class=&quot;tipheader&quot;&gt;
&lt;style&gt;
    [data-mode=&quot;light&quot;]{
      --gradient: url(#lightGradient);
    }

    [data-mode=&quot;dark&quot;]{
      --gradient: url(#darkGradient);
    }
    
    #darkGradient {
       --color-background:#4e3030;
    }

    .myCircle {
      fill: var(--gradient);
    }
&lt;&#x2F;style&gt;
&lt;svg version=&quot;1.0&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;
 width=&quot;45pt&quot; height=&quot;45pt&quot; viewBox=&quot;0 0 275 275&quot;
 preserveAspectRatio=&quot;xMidYMid meet&quot;&gt;
 &lt;defs&gt;
    &lt;radialGradient id=&quot;darkGradient&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot; fx=&quot;50%&quot; fy=&quot;40%&quot;&gt;
      &lt;stop offset=&quot;0%&quot; stop-color=&quot;var(--color-background)&quot; &#x2F;&gt;
      &lt;stop offset=&quot;50%&quot; stop-color=&quot;#1d1f21&quot; &#x2F;&gt;
    &lt;&#x2F;radialGradient&gt;
    &lt;radialGradient id=&quot;lightGradient&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot; fx=&quot;50%&quot; fy=&quot;40%&quot;&gt;
      &lt;stop offset=&quot;0%&quot; stop-color=&quot;#f6e2f5&quot; &#x2F;&gt;
      &lt;stop offset=&quot;50%&quot; stop-color=&quot;#d6e2f5&quot; &#x2F;&gt;
    &lt;&#x2F;radialGradient&gt;
&lt;&#x2F;defs&gt;
&lt;circle class=&quot;myCircle&quot; cx=&quot;140&quot; cy=&quot;140&quot; r=&quot;128&quot; &#x2F;&gt;
&lt;g transform=&quot;translate(0.000000,275.000000) scale(0.100000,-0.100000)&quot;
fill=&quot;#FFFFFF&quot; stroke=&quot;#FFFFFF&quot;&gt;
&lt;path d=&quot;M1355 2277 c-3 -7 -5 -49 -3 -93 3 -71 5 -79 23 -79 19 0 20 7 20 90
0 78 -2 90 -18 93 -9 2 -19 -3 -22 -11z m35 -83 c0 -64 -3 -85 -12 -82 -14 5
-24 105 -14 144 13 52 26 21 26 -62z&quot;&#x2F;&gt;
&lt;path d=&quot;M1107 2226 c-3 -8 11 -48 30 -90 26 -54 42 -76 55 -76 26 0 23 17
-17 104 -34 72 -56 93 -68 62z m66 -82 c29 -55 34 -78 16 -72 -6 2 -10 7 -9
12 1 5 -3 12 -8 15 -10 7 -52 98 -52 113 0 16 24 -15 53 -68z&quot;&#x2F;&gt;
&lt;path d=&quot;M1644 2183 c-10 -16 -27 -44 -40 -64 -31 -50 -34 -74 -9 -74 13 0 32
22 62 73 24 40 41 78 38 83 -11 17 -35 9 -51 -18z m36 6 c0 -18 -43 -89 -50
-84 -4 3 -7 -3 -6 -12 0 -10 -7 -19 -16 -21 -16 -3 -16 1 4 37 12 22 25 38 30
35 5 -3 8 0 7 7 -3 19 11 49 22 49 5 0 9 -5 9 -11z&quot;&#x2F;&gt;
&lt;path d=&quot;M901 2063 c0 -24 125 -127 144 -119 27 10 15 30 -49 84 -65 54 -96
65 -95 35z m87 -44 c34 -27 60 -55 56 -60 -8 -13 -50 15 -46 31 1 6 -1 9 -6 6
-10 -6 -82 51 -82 65 0 17 15 9 78 -42z&quot;&#x2F;&gt;
&lt;path d=&quot;M1788 1993 c-65 -45 -89 -83 -53 -83 22 0 157 100 152 114 -8 23 -34
15 -99 -31z m82 25 c-1 -12 -118 -98 -133 -98 -20 0 0 23 56 64 66 48 77 53
77 34z&quot;&#x2F;&gt;
&lt;path d=&quot;M1300 1927 c-73 -46 -170 -175 -170 -225 0 -10 15 -40 32 -68 28 -42
33 -58 32 -109 -1 -134 -58 -267 -158 -372 -33 -36 -65 -71 -69 -79 -9 -15
-37 -19 -37 -5 0 11 -63 49 -95 57 -14 3 -25 10 -25 14 0 5 -12 23 -27 41 -17
20 -28 46 -30 70 -4 59 -46 141 -92 181 -54 46 -115 63 -222 62 -181 -1 -273
-90 -270 -260 0 -36 3 -77 7 -92 19 -92 113 -305 162 -370 65 -86 262 -187
462 -237 36 -9 109 -32 164 -51 54 -19 110 -34 125 -34 43 0 70 27 110 109 20
42 59 105 85 140 26 36 52 84 59 108 8 30 16 43 29 43 14 0 18 -8 18 -32 0
-44 29 -156 50 -193 10 -17 21 -55 25 -83 9 -64 22 -79 81 -88 84 -12 371 58
489 119 50 27 225 164 225 177 0 6 7 10 15 10 8 0 24 9 35 20 11 11 24 20 30
20 6 0 10 6 10 14 0 8 7 16 15 20 8 3 15 13 15 21 0 9 5 13 10 10 6 -3 10 0
10 8 0 8 11 25 25 38 13 13 25 30 25 37 0 6 4 12 9 12 5 0 13 12 19 28 5 15
19 38 31 51 11 13 18 28 15 32 -3 5 -1 9 5 9 6 0 22 38 36 84 28 92 25 148
-11 187 -9 10 -13 19 -8 19 4 0 -11 18 -34 39 -38 36 -146 98 -155 89 -2 -1
-10 2 -18 8 -41 33 -239 61 -239 35 0 -6 -9 -11 -19 -11 -11 0 -33 -12 -50
-26 -36 -30 -85 -109 -77 -123 3 -5 2 -11 -4 -13 -6 -2 -13 -28 -17 -58 -3
-30 -12 -58 -19 -63 -7 -4 -15 -21 -19 -37 -5 -22 -16 -34 -39 -44 -18 -7 -52
-32 -76 -55 -41 -39 -70 -52 -70 -31 0 5 -13 25 -30 43 -55 63 -130 250 -130
325 0 13 14 45 31 70 l31 47 -11 82 c-8 55 -8 89 -2 101 7 14 5 26 -10 48 -10
16 -19 37 -19 47 0 11 -13 24 -32 32 -18 7 -39 23 -46 35 -12 20 -14 20 -42 3
-29 -17 -30 -16 -54 10 -30 33 -50 34 -96 4z m88 -25 c15 -22 14 -23 -11 -17
-19 5 -28 2 -36 -13 -17 -32 -13 -50 19 -84 42 -43 37 -98 -9 -98 -11 0 -11 4
4 20 21 23 13 54 -12 46 -15 -4 -21 5 -36 50 -15 49 -16 58 -2 83 24 47 57 52
83 13z m92 -16 c0 -14 -29 -31 -38 -21 -6 6 18 35 29 35 5 0 9 -6 9 -14z
m-203 -20 c-8 -19 41 -164 65 -195 24 -31 23 -68 -1 -81 -23 -12 -42 7 -21 20
20 12 7 45 -18 43 -23 -3 -24 0 -52 125 -10 45 -10 56 4 77 18 27 31 34 23 11z
m99 -11 c-6 -17 21 -48 35 -40 5 4 9 13 9 21 0 10 8 14 23 12 16 -2 21 -9 19
-23 -9 -48 -43 -58 -86 -24 -25 19 -34 48 -19 62 12 13 25 7 19 -8z m159 -8
c20 -15 16 -54 -8 -79 -7 -7 -19 -27 -26 -45 -7 -18 -21 -35 -31 -38 -18 -6
-55 -53 -47 -61 7 -7 97 83 97 98 1 22 40 62 50 52 11 -11 -17 -94 -30 -94 -4
0 -10 -13 -13 -29 -4 -17 -14 -32 -26 -36 -29 -9 -71 -45 -71 -61 0 -10 6 -8
20 6 12 12 32 25 46 30 16 6 32 25 42 50 9 22 20 40 25 40 14 0 7 -48 -11 -71
-11 -13 -22 -37 -26 -52 -3 -15 -18 -37 -31 -49 -14 -12 -25 -25 -25 -30 0
-19 64 51 84 92 20 43 21 43 24 18 4 -33 -37 -96 -101 -155 -42 -39 -58 -47
-111 -55 -14 -2 -24 -22 -41 -89 -26 -100 -41 -214 -27 -205 5 3 12 28 15 56
7 61 55 217 69 226 18 11 19 -4 3 -72 -9 -38 -25 -145 -35 -239 -22 -205 -38
-265 -94 -347 -24 -35 -55 -86 -69 -114 -57 -112 -92 -132 -165 -95 -20 10
-77 33 -127 51 -81 30 -131 54 -145 70 -16 19 -79 60 -91 60 -9 0 -7 -5 6 -12
11 -6 29 -20 40 -31 11 -10 36 -27 55 -37 79 -43 -57 -9 -185 45 -40 17 -95
61 -95 77 0 11 71 112 82 116 4 2 8 10 8 17 0 8 6 18 13 22 8 4 22 22 32 40
10 18 22 30 27 27 4 -3 8 1 8 8 0 16 57 68 65 60 3 -3 5 0 5 6 0 19 42 62 53
55 6 -3 7 -1 3 5 -21 35 103 -9 139 -48 16 -18 16 -22 -14 -81 -17 -34 -31
-77 -31 -95 0 -18 -4 -36 -10 -39 -16 -10 -12 -88 6 -113 8 -12 22 -22 30 -22
10 0 9 5 -6 20 -20 20 -25 45 -14 74 5 13 9 14 20 5 9 -8 14 -8 14 -1 0 6 -5
14 -10 17 -20 13 -10 86 21 148 33 65 63 105 149 197 76 82 113 169 155 364 6
26 9 28 42 23 49 -8 113 39 113 84 0 16 7 46 15 66 8 19 15 44 15 54 0 10 12
24 26 31 25 12 46 42 58 81 6 21 16 21 41 4z m-282 -149 c41 -124 42 -128 27
-128 -5 0 -10 5 -10 11 0 6 -18 41 -40 79 -45 78 -55 150 -20 150 4 0 23 -51
43 -112z m3 -145 c-9 -10 -32 14 -71 78 -28 46 -35 66 -30 87 6 24 11 18 57
-66 27 -51 48 -96 44 -99z m1012 -43 c2 -6 8 -8 12 -5 5 3 17 2 27 -3 10 -5
47 -23 83 -39 36 -17 80 -43 97 -57 41 -34 73 -102 73 -153 0 -45 -33 -148
-55 -173 -8 -9 -13 -19 -10 -22 3 -3 -4 -13 -15 -23 -11 -10 -20 -26 -20 -35
0 -20 -24 -43 -33 -33 -4 3 -7 -3 -7 -15 0 -12 -8 -30 -18 -40 -9 -9 -28 -32
-41 -50 l-23 -33 -46 81 c-60 103 -145 202 -254 297 -92 79 -100 95 -73 143 8
14 14 35 15 47 0 11 13 32 29 46 17 14 28 27 25 29 -2 3 2 11 11 18 8 7 15 10
15 6 0 -3 15 4 33 15 27 17 42 19 102 14 39 -3 72 -10 73 -15z m-1714 -44
c103 -31 164 -103 181 -211 l6 -41 -140 -153 c-77 -84 -162 -181 -188 -216
-26 -35 -52 -63 -58 -61 -13 4 -111 200 -134 271 -55 165 -49 275 18 347 64
70 203 98 315 64z m994 -124 c15 -75 67 -180 130 -266 58 -79 71 -129 53 -202
-15 -59 -7 -68 14 -18 10 24 15 61 14 94 -4 66 5 84 72 144 62 56 92 66 121
40 25 -23 135 -163 174 -223 l28 -44 -37 -32 c-20 -17 -56 -38 -79 -45 -35
-11 -39 -15 -20 -18 26 -4 104 39 126 69 14 21 15 20 41 -21 14 -23 28 -47 31
-54 6 -14 -58 -76 -128 -124 -53 -37 -62 -27 -21 26 14 19 20 33 12 30 -8 -2
-26 -26 -41 -53 -24 -44 -34 -52 -95 -76 -192 -77 -369 -106 -399 -65 -8 11
-14 28 -14 39 0 10 -11 32 -24 48 -45 53 -112 273 -123 405 -6 79 10 240 33
321 13 47 18 53 57 66 23 9 47 16 52 16 6 1 16 -25 23 -57z m483 -159 c44 -36
79 -69 79 -72 0 -3 17 -24 38 -46 74 -77 152 -209 152 -256 0 -17 -40 -49 -40
-32 0 4 -4 2 -9 -5 -6 -10 -16 0 -36 35 -76 130 -184 273 -263 348 -41 39 -43
43 -31 68 7 15 16 27 22 27 5 0 45 -30 88 -67z m-1231 -53 c0 -3 -13 -13 -29
-23 -57 -34 -279 -298 -314 -374 -13 -29 -25 -28 -60 1 l-28 23 45 59 c59 78
137 167 249 282 l92 94 22 -29 c13 -15 23 -30 23 -33z&quot;&#x2F;&gt;
&lt;path d=&quot;M1150 954 c0 -26 -52 -128 -78 -152 -29 -28 -21 -43 9 -16 20 18 89
151 89 173 0 6 -4 11 -10 11 -5 0 -10 -7 -10 -16z&quot;&#x2F;&gt;
&lt;path d=&quot;M680 810 c45 -9 157 -13 149 -6 -2 2 -47 6 -99 9 -67 4 -82 3 -50 -3z&quot;&#x2F;&gt;
&lt;path d=&quot;M1210 740 c-12 -25 -26 -47 -29 -50 -4 -3 -15 -18 -25 -35 -42 -69
-62 -82 -116 -77 -57 4 -66 -9 -20 -33 54 -28 100 -10 126 48 10 23 25 48 32
56 21 21 64 111 59 124 -2 7 -14 -8 -27 -33z&quot;&#x2F;&gt;
&lt;path d=&quot;M1521 1338 c0 -7 9 -31 20 -53 15 -30 18 -34 14 -13 -10 54 -37 104
-34 66z&quot;&#x2F;&gt;
&lt;path d=&quot;M1560 961 c0 -6 4 -11 9 -11 5 0 23 -21 39 -47 35 -56 72 -97 80 -89
3 4 -5 17 -17 30 -13 14 -37 46 -55 72 -30 46 -56 67 -56 45z&quot;&#x2F;&gt;
&lt;path d=&quot;M785 1840 c-11 -18 6 -29 84 -51 75 -21 101 -20 101 5 0 25 -171 68
-185 46z m80 -11 c25 -6 42 -15 39 -20 -3 -5 2 -6 10 -3 22 8 52 -4 40 -16
-11 -11 -94 8 -94 21 0 5 -7 6 -15 3 -8 -4 -21 -1 -29 5 -7 6 -16 8 -19 4 -4
-3 -7 -1 -7 5 0 15 19 15 75 1z&quot;&#x2F;&gt;
&lt;path d=&quot;M1850 1786 c-37 -8 -56 -17 -58 -28 -2 -9 1 -19 6 -22 14 -9 176 24
184 37 18 29 -32 34 -132 13z m120 -5 c0 -9 -70 -26 -130 -33 -46 -5 -31 17
16 24 25 4 49 9 52 12 9 10 62 7 62 -3z&quot;&#x2F;&gt;
&lt;path d=&quot;M835 1606 c-42 -8 -61 -16 -63 -28 -5 -27 11 -29 102 -12 72 14 86
19 86 35 0 22 -30 24 -125 5z m115 -5 c0 -9 -12 -13 -100 -28 -59 -10 -60 -10
-60 2 -1 5 23 15 52 21 69 15 108 16 108 5z&quot;&#x2F;&gt;
&lt;path d=&quot;M1791 1581 c-28 -18 -1 -38 79 -59 84 -23 103 -22 98 5 -2 10 -33 24
-83 39 -44 13 -80 23 -80 23 0 1 -6 -3 -14 -8z m138 -40 c14 -4 27 -13 29 -21
3 -8 -1 -11 -9 -8 -8 3 -45 13 -84 23 -80 21 -79 20 -71 34 4 6 25 4 59 -6 28
-9 63 -19 76 -22z&quot;&#x2F;&gt;
&lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;span class=&quot;flex-info&quot;&gt;Flex Info&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
	&lt;div&gt; &lt;p&gt;&lt;code&gt;source&lt;&#x2F;code&gt;, &lt;code&gt;destination&lt;&#x2F;code&gt;, and &lt;code&gt;item&lt;&#x2F;code&gt; filters are exact matches, except if they contains regex characters, in which case they are treated as regex patterns.&lt;&#x2F;p&gt;
 &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;&#x2F;h3&gt;
&lt;p&gt;Glob dependencies (&lt;code&gt;*&lt;&#x2F;code&gt;) are not correctly handled yet, so if you have &lt;code&gt;use crate::mega_module::*;&lt;&#x2F;code&gt;, it will not resolve the actual items being used here.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>serde_json_borrow 0.8: Faster than SIMD?</title>
        <published>2025-06-15T00:00:00+00:00</published>
        <updated>2025-06-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="http://flexineering.com/posts/serde-json-borrow-08/"/>
        <id>http://flexineering.com/posts/serde-json-borrow-08/</id>
        
        <content type="html" xml:base="http://flexineering.com/posts/serde-json-borrow-08/">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;serde-json-borrow-0-8&quot;&gt;serde_json_borrow 0.8&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; 0.8 is out! This release brings a major performance improvement.
It is now the fastest JSON parser in all benchmarks, even outperforming &lt;code&gt;simd_json&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-it&quot;&gt;What is it&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; builds on &lt;code&gt;serde_json&lt;&#x2F;code&gt;’s deserializer to produce a &lt;code&gt;serde_json_borrow::Value&amp;lt;&#x27;ctx&amp;gt;&lt;&#x2F;code&gt; that can borrow directly from the
input buffer and reference string slices and other data directly from the input buffer.&lt;&#x2F;p&gt;
&lt;p&gt;It’s ideal for scenarios where JSON is used as a transient representation to extract some data or apply some transformation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-changed-in-0-8&quot;&gt;What Changed in 0.8&lt;&#x2F;h2&gt;
&lt;p&gt;The main change and performance improvement comes from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PSeitz&#x2F;serde_json_borrow&#x2F;pull&#x2F;32&quot;&gt;PR #32&lt;&#x2F;a&gt; (thanks @jszwec).
Previously, serde’s default behavior would always create &lt;code&gt;Cow::Owned&lt;&#x2F;code&gt; for object keys even when borrowing was possible
(see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&#x2F;issues&#x2F;1852&quot;&gt;serde-rs&#x2F;serde#1852&lt;&#x2F;a&gt;). To address this,
&lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; introduces a custom wrapper around &lt;code&gt;Cow&lt;&#x2F;code&gt; to allow borrowed keys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;value-vs-ownedvalue&quot;&gt;Value vs OwnedValue&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; provides two main ways to work with parsed JSON:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Value&amp;lt;&#x27;ctx&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: This variant borrows string slices and other data directly from the input buffer.
It requires that the input &lt;code&gt;&amp;amp;&#x27;ctx str&lt;&#x2F;code&gt; outlives the parsed &lt;code&gt;Value&amp;lt;&#x27;ctx&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;OwnedValue&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: This variant clones the serialized JSON &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and therefore does not depend on the input buffer’s lifetime.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cowkeys-feature-flag&quot;&gt;&lt;code&gt;cowkeys&lt;&#x2F;code&gt; Feature Flag&lt;&#x2F;h2&gt;
&lt;p&gt;The feature flag &lt;code&gt;cowkeys&lt;&#x2F;code&gt; uses &lt;code&gt;Cow&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; instead of &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; as keys in objects. This enables support for escaped strings.
The feature is enabled by default, but can be disabled if you know your JSON data does not contain escaped strings.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;benchmark&quot;&gt;Benchmark&lt;&#x2F;h1&gt;
&lt;p&gt;The benchmark results show that &lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; is now the fastest choice, even outperforming &lt;code&gt;simd_json&lt;&#x2F;code&gt; in all test cases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benchmark-setup&quot;&gt;Benchmark Setup&lt;&#x2F;h2&gt;
&lt;p&gt;The benchmarks were run on a machine with the following specifications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;&#x2F;strong&gt;: AMD Ryzen 9 9800X3D&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RAM&lt;&#x2F;strong&gt;: 32 GB&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OS&lt;&#x2F;strong&gt;: 6.14.6-2-MANJARO&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Disk&lt;&#x2F;strong&gt;: Samsung SSD 990 PRO&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Rust Version&lt;&#x2F;strong&gt;: 1.87.0&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Benchmarking Tool&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PSeitz&#x2F;binggan&quot;&gt;binggan&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The benchmarks were configured to trash the CPU cache and branch predictor (or at least try to 🙂) to ensure that the
performance measurements are not influenced by caching effects. This uses the &lt;code&gt;CacheTrasher&lt;&#x2F;code&gt; and
&lt;code&gt;BPUTrasher&lt;&#x2F;code&gt; plugins from the &lt;code&gt;binggan&lt;&#x2F;code&gt; crate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; runner: BenchRunner &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#66d9ef;&quot;&gt;BenchRunner&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ff79c6;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new();
&lt;&#x2F;span&gt;&lt;span&gt;runner
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#66d9ef;&quot;&gt;CacheTrasher&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ff79c6;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;default())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#66d9ef;&quot;&gt;BPUTrasher&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ff79c6;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;default());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can run the benchmarks yourself with &lt;code&gt;cargo bench&lt;&#x2F;code&gt; on the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde_json_borrow&#x2F;tree&#x2F;blog_post_benchmark&quot;&gt;&lt;code&gt;https:&#x2F;&#x2F;github.com&#x2F;serde_json_borrow&#x2F;tree&#x2F;blog_post_benchmark&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
branch in the &lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; github repo.&lt;&#x2F;p&gt;
&lt;p&gt;The benchmarks below are the worst case configuration for &lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Only &lt;code&gt;OwnedValue&lt;&#x2F;code&gt; is tested (but the data is already &lt;code&gt;String&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;cowkeys&lt;&#x2F;code&gt; feature is enabled, which allows for escaped keys in JSON objects.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;accessing-the-parsed-json&quot;&gt;Accessing the Parsed JSON&lt;&#x2F;h3&gt;
&lt;p&gt;One of the main differences between &lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; and &lt;code&gt;serde_json&lt;&#x2F;code&gt; is that &lt;code&gt;serde_json_borrow&lt;&#x2F;code&gt; uses a &lt;code&gt;Vec&lt;&#x2F;code&gt; for objects
instead of a &lt;code&gt;BTreeMap&lt;&#x2F;code&gt;.
This improves deserialization performance, but reduces read-access performance for very large objects.
The benchmark reads several keys 10 times from the parsed JSON object.
Read access is dwarfed by the parsing performance in this benchmark.&lt;&#x2F;p&gt;
&lt;p&gt;For objects with very few keys, a scan of the &lt;code&gt;Vec&lt;&#x2F;code&gt; is faster than a binary search in a &lt;code&gt;BTreeMap&lt;&#x2F;code&gt;.
The break-even probably between 10 and 30 keys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset: simple_json&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Avg MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Median MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range Low MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range High MB&#x2F;s&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;309.41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;309.42&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;297.48&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;312.87&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;302.63&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;303.51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;292.17&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;306.87&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;551.28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;550.57&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;537.65&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;561.81&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;528.08&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;528.61&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;510.66&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;542.12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow v0.7::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;440.91&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;440.59&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;429.04&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;449.27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;simd_json_borrow&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;291.32&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;291.51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;285.61&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;292.38&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset: hdfs&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Avg MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Median MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range Low MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range High MB&#x2F;s&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;684.07&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;685.38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;672.70&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;689.32&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;690.25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;687.36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;664.73&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;700.37&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1138.48&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1143.40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1047.45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1156.10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1128.96&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1121.38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1085.85&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1163.26&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow v0.7::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;893.49&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;895.36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;827.68&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;911.69&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;simd_json_borrow&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;688.15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;690.37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;659.29&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;692.93&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset: hdfs_with_array&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Avg MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Median MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range Low MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range High MB&#x2F;s&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;460.97&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;461.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;453.62&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;474.36&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;475.77&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;476.88&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;464.11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;485.78&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;817.97&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;819.37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;795.93&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;834.68&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;817.90&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;818.61&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;788.71&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;833.57&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow v0.7::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;731.79&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;731.43&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;717.81&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;741.30&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;simd_json_borrow&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;539.51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;540.13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;533.17&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;541.27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset: wiki&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Avg MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Median MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range Low MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range High MB&#x2F;s&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1354.50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1354.40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1337.20&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1367.90&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1397.20&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1397.60&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1385.00&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1414.60&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1510.70&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1514.30&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1480.30&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1537.00&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1558.60&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1558.40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1536.70&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1583.30&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow v0.7::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1463.10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1463.60&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1447.10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1481.30&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;simd_json_borrow&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1473.60&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1473.70&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1459.00&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1483.20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset: gh-archive&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Avg MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Median MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range Low MB&#x2F;s&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Range High MB&#x2F;s&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;450.44&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;450.08&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;439.20&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;456.40&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;447.61&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;446.50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;442.51&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;455.33&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1147.90&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1143.91&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1124.97&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1170.94&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow::OwnedValue + access&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1154.05&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1154.36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1129.16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1185.28&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;serde_json_borrow v0.7::OwnedValue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;690.87&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;689.07&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;682.23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;700.78&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;simd_json_borrow&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;995.81&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;996.01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;991.79&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;999.33&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;Noice, isn’t it?&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
